#ifndef _ALTERA_SPW_TRC_H_
#define _ALTERA_SPW_TRC_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'spw_babasu' in
 * file 'spw_babasu.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following master:
 *   h2f_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'LINK_START', class 'altera_avalon_pio'
 * The macros are prefixed with 'LINK_START_'.
 * The prefix is the slave descriptor.
 */
#define LINK_START_COMPONENT_TYPE altera_avalon_pio
#define LINK_START_COMPONENT_NAME LINK_START
#define LINK_START_BASE 0x0
#define LINK_START_SPAN 16
#define LINK_START_END 0xf
#define LINK_START_BIT_CLEARING_EDGE_REGISTER 0
#define LINK_START_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LINK_START_CAPTURE 0
#define LINK_START_DATA_WIDTH 1
#define LINK_START_DO_TEST_BENCH_WIRING 0
#define LINK_START_DRIVEN_SIM_VALUE 0
#define LINK_START_EDGE_TYPE NONE
#define LINK_START_FREQ 50000000
#define LINK_START_HAS_IN 0
#define LINK_START_HAS_OUT 1
#define LINK_START_HAS_TRI 0
#define LINK_START_IRQ_TYPE NONE
#define LINK_START_RESET_VALUE 0

/*
 * Macros for device 'LINK_DISABLE', class 'altera_avalon_pio'
 * The macros are prefixed with 'LINK_DISABLE_'.
 * The prefix is the slave descriptor.
 */
#define LINK_DISABLE_COMPONENT_TYPE altera_avalon_pio
#define LINK_DISABLE_COMPONENT_NAME LINK_DISABLE
#define LINK_DISABLE_BASE 0x10
#define LINK_DISABLE_SPAN 16
#define LINK_DISABLE_END 0x1f
#define LINK_DISABLE_BIT_CLEARING_EDGE_REGISTER 0
#define LINK_DISABLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LINK_DISABLE_CAPTURE 0
#define LINK_DISABLE_DATA_WIDTH 1
#define LINK_DISABLE_DO_TEST_BENCH_WIRING 0
#define LINK_DISABLE_DRIVEN_SIM_VALUE 0
#define LINK_DISABLE_EDGE_TYPE NONE
#define LINK_DISABLE_FREQ 50000000
#define LINK_DISABLE_HAS_IN 0
#define LINK_DISABLE_HAS_OUT 1
#define LINK_DISABLE_HAS_TRI 0
#define LINK_DISABLE_IRQ_TYPE NONE
#define LINK_DISABLE_RESET_VALUE 0

/*
 * Macros for device 'AUTOSTART', class 'altera_avalon_pio'
 * The macros are prefixed with 'AUTOSTART_'.
 * The prefix is the slave descriptor.
 */
#define AUTOSTART_COMPONENT_TYPE altera_avalon_pio
#define AUTOSTART_COMPONENT_NAME AUTOSTART
#define AUTOSTART_BASE 0x20
#define AUTOSTART_SPAN 16
#define AUTOSTART_END 0x2f
#define AUTOSTART_BIT_CLEARING_EDGE_REGISTER 0
#define AUTOSTART_BIT_MODIFYING_OUTPUT_REGISTER 0
#define AUTOSTART_CAPTURE 0
#define AUTOSTART_DATA_WIDTH 1
#define AUTOSTART_DO_TEST_BENCH_WIRING 0
#define AUTOSTART_DRIVEN_SIM_VALUE 0
#define AUTOSTART_EDGE_TYPE NONE
#define AUTOSTART_FREQ 50000000
#define AUTOSTART_HAS_IN 0
#define AUTOSTART_HAS_OUT 1
#define AUTOSTART_HAS_TRI 0
#define AUTOSTART_IRQ_TYPE NONE
#define AUTOSTART_RESET_VALUE 0

/*
 * Macros for device 'CURRENTSTATE', class 'altera_avalon_pio'
 * The macros are prefixed with 'CURRENTSTATE_'.
 * The prefix is the slave descriptor.
 */
#define CURRENTSTATE_COMPONENT_TYPE altera_avalon_pio
#define CURRENTSTATE_COMPONENT_NAME CURRENTSTATE
#define CURRENTSTATE_BASE 0x30
#define CURRENTSTATE_SPAN 16
#define CURRENTSTATE_END 0x3f
#define CURRENTSTATE_BIT_CLEARING_EDGE_REGISTER 0
#define CURRENTSTATE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CURRENTSTATE_CAPTURE 0
#define CURRENTSTATE_DATA_WIDTH 3
#define CURRENTSTATE_DO_TEST_BENCH_WIRING 0
#define CURRENTSTATE_DRIVEN_SIM_VALUE 0
#define CURRENTSTATE_EDGE_TYPE NONE
#define CURRENTSTATE_FREQ 50000000
#define CURRENTSTATE_HAS_IN 1
#define CURRENTSTATE_HAS_OUT 0
#define CURRENTSTATE_HAS_TRI 0
#define CURRENTSTATE_IRQ_TYPE NONE
#define CURRENTSTATE_RESET_VALUE 0

/*
 * Macros for device 'FLAGS', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAGS_'.
 * The prefix is the slave descriptor.
 */
#define FLAGS_COMPONENT_TYPE altera_avalon_pio
#define FLAGS_COMPONENT_NAME FLAGS
#define FLAGS_BASE 0x40
#define FLAGS_SPAN 16
#define FLAGS_END 0x4f
#define FLAGS_BIT_CLEARING_EDGE_REGISTER 0
#define FLAGS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAGS_CAPTURE 0
#define FLAGS_DATA_WIDTH 11
#define FLAGS_DO_TEST_BENCH_WIRING 0
#define FLAGS_DRIVEN_SIM_VALUE 0
#define FLAGS_EDGE_TYPE NONE
#define FLAGS_FREQ 50000000
#define FLAGS_HAS_IN 1
#define FLAGS_HAS_OUT 0
#define FLAGS_HAS_TRI 0
#define FLAGS_IRQ_TYPE NONE
#define FLAGS_RESET_VALUE 0

/*
 * Macros for device 'DATA_I', class 'altera_avalon_pio'
 * The macros are prefixed with 'DATA_I_'.
 * The prefix is the slave descriptor.
 */
#define DATA_I_COMPONENT_TYPE altera_avalon_pio
#define DATA_I_COMPONENT_NAME DATA_I
#define DATA_I_BASE 0x50
#define DATA_I_SPAN 16
#define DATA_I_END 0x5f
#define DATA_I_BIT_CLEARING_EDGE_REGISTER 0
#define DATA_I_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DATA_I_CAPTURE 0
#define DATA_I_DATA_WIDTH 9
#define DATA_I_DO_TEST_BENCH_WIRING 0
#define DATA_I_DRIVEN_SIM_VALUE 0
#define DATA_I_EDGE_TYPE NONE
#define DATA_I_FREQ 50000000
#define DATA_I_HAS_IN 0
#define DATA_I_HAS_OUT 1
#define DATA_I_HAS_TRI 0
#define DATA_I_IRQ_TYPE NONE
#define DATA_I_RESET_VALUE 0

/*
 * Macros for device 'WR_DATA', class 'altera_avalon_pio'
 * The macros are prefixed with 'WR_DATA_'.
 * The prefix is the slave descriptor.
 */
#define WR_DATA_COMPONENT_TYPE altera_avalon_pio
#define WR_DATA_COMPONENT_NAME WR_DATA
#define WR_DATA_BASE 0x60
#define WR_DATA_SPAN 16
#define WR_DATA_END 0x6f
#define WR_DATA_BIT_CLEARING_EDGE_REGISTER 0
#define WR_DATA_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WR_DATA_CAPTURE 0
#define WR_DATA_DATA_WIDTH 1
#define WR_DATA_DO_TEST_BENCH_WIRING 0
#define WR_DATA_DRIVEN_SIM_VALUE 0
#define WR_DATA_EDGE_TYPE NONE
#define WR_DATA_FREQ 50000000
#define WR_DATA_HAS_IN 0
#define WR_DATA_HAS_OUT 1
#define WR_DATA_HAS_TRI 0
#define WR_DATA_IRQ_TYPE NONE
#define WR_DATA_RESET_VALUE 0

/*
 * Macros for device 'TX_FULL', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_FULL_'.
 * The prefix is the slave descriptor.
 */
#define TX_FULL_COMPONENT_TYPE altera_avalon_pio
#define TX_FULL_COMPONENT_NAME TX_FULL
#define TX_FULL_BASE 0x70
#define TX_FULL_SPAN 16
#define TX_FULL_END 0x7f
#define TX_FULL_BIT_CLEARING_EDGE_REGISTER 0
#define TX_FULL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_FULL_CAPTURE 0
#define TX_FULL_DATA_WIDTH 1
#define TX_FULL_DO_TEST_BENCH_WIRING 0
#define TX_FULL_DRIVEN_SIM_VALUE 0
#define TX_FULL_EDGE_TYPE NONE
#define TX_FULL_FREQ 50000000
#define TX_FULL_HAS_IN 1
#define TX_FULL_HAS_OUT 0
#define TX_FULL_HAS_TRI 0
#define TX_FULL_IRQ_TYPE NONE
#define TX_FULL_RESET_VALUE 0

/*
 * Macros for device 'DATA_O', class 'altera_avalon_pio'
 * The macros are prefixed with 'DATA_O_'.
 * The prefix is the slave descriptor.
 */
#define DATA_O_COMPONENT_TYPE altera_avalon_pio
#define DATA_O_COMPONENT_NAME DATA_O
#define DATA_O_BASE 0x80
#define DATA_O_SPAN 16
#define DATA_O_END 0x8f
#define DATA_O_BIT_CLEARING_EDGE_REGISTER 0
#define DATA_O_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DATA_O_CAPTURE 0
#define DATA_O_DATA_WIDTH 9
#define DATA_O_DO_TEST_BENCH_WIRING 0
#define DATA_O_DRIVEN_SIM_VALUE 0
#define DATA_O_EDGE_TYPE NONE
#define DATA_O_FREQ 50000000
#define DATA_O_HAS_IN 1
#define DATA_O_HAS_OUT 0
#define DATA_O_HAS_TRI 0
#define DATA_O_IRQ_TYPE NONE
#define DATA_O_RESET_VALUE 0

/*
 * Macros for device 'RD_DATA', class 'altera_avalon_pio'
 * The macros are prefixed with 'RD_DATA_'.
 * The prefix is the slave descriptor.
 */
#define RD_DATA_COMPONENT_TYPE altera_avalon_pio
#define RD_DATA_COMPONENT_NAME RD_DATA
#define RD_DATA_BASE 0x90
#define RD_DATA_SPAN 16
#define RD_DATA_END 0x9f
#define RD_DATA_BIT_CLEARING_EDGE_REGISTER 0
#define RD_DATA_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RD_DATA_CAPTURE 0
#define RD_DATA_DATA_WIDTH 1
#define RD_DATA_DO_TEST_BENCH_WIRING 0
#define RD_DATA_DRIVEN_SIM_VALUE 0
#define RD_DATA_EDGE_TYPE NONE
#define RD_DATA_FREQ 50000000
#define RD_DATA_HAS_IN 0
#define RD_DATA_HAS_OUT 1
#define RD_DATA_HAS_TRI 0
#define RD_DATA_IRQ_TYPE NONE
#define RD_DATA_RESET_VALUE 0

/*
 * Macros for device 'RX_EMPTY', class 'altera_avalon_pio'
 * The macros are prefixed with 'RX_EMPTY_'.
 * The prefix is the slave descriptor.
 */
#define RX_EMPTY_COMPONENT_TYPE altera_avalon_pio
#define RX_EMPTY_COMPONENT_NAME RX_EMPTY
#define RX_EMPTY_BASE 0xa0
#define RX_EMPTY_SPAN 16
#define RX_EMPTY_END 0xaf
#define RX_EMPTY_BIT_CLEARING_EDGE_REGISTER 0
#define RX_EMPTY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RX_EMPTY_CAPTURE 0
#define RX_EMPTY_DATA_WIDTH 1
#define RX_EMPTY_DO_TEST_BENCH_WIRING 0
#define RX_EMPTY_DRIVEN_SIM_VALUE 0
#define RX_EMPTY_EDGE_TYPE NONE
#define RX_EMPTY_FREQ 50000000
#define RX_EMPTY_HAS_IN 1
#define RX_EMPTY_HAS_OUT 0
#define RX_EMPTY_HAS_TRI 0
#define RX_EMPTY_IRQ_TYPE NONE
#define RX_EMPTY_RESET_VALUE 0

/*
 * Macros for device 'TICK_OUT', class 'altera_avalon_pio'
 * The macros are prefixed with 'TICK_OUT_'.
 * The prefix is the slave descriptor.
 */
#define TICK_OUT_COMPONENT_TYPE altera_avalon_pio
#define TICK_OUT_COMPONENT_NAME TICK_OUT
#define TICK_OUT_BASE 0xb0
#define TICK_OUT_SPAN 16
#define TICK_OUT_END 0xbf
#define TICK_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define TICK_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TICK_OUT_CAPTURE 0
#define TICK_OUT_DATA_WIDTH 1
#define TICK_OUT_DO_TEST_BENCH_WIRING 0
#define TICK_OUT_DRIVEN_SIM_VALUE 0
#define TICK_OUT_EDGE_TYPE NONE
#define TICK_OUT_FREQ 50000000
#define TICK_OUT_HAS_IN 1
#define TICK_OUT_HAS_OUT 0
#define TICK_OUT_HAS_TRI 0
#define TICK_OUT_IRQ_TYPE NONE
#define TICK_OUT_RESET_VALUE 0

/*
 * Macros for device 'TIME_OUT', class 'altera_avalon_pio'
 * The macros are prefixed with 'TIME_OUT_'.
 * The prefix is the slave descriptor.
 */
#define TIME_OUT_COMPONENT_TYPE altera_avalon_pio
#define TIME_OUT_COMPONENT_NAME TIME_OUT
#define TIME_OUT_BASE 0xc0
#define TIME_OUT_SPAN 16
#define TIME_OUT_END 0xcf
#define TIME_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define TIME_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TIME_OUT_CAPTURE 0
#define TIME_OUT_DATA_WIDTH 8
#define TIME_OUT_DO_TEST_BENCH_WIRING 0
#define TIME_OUT_DRIVEN_SIM_VALUE 0
#define TIME_OUT_EDGE_TYPE NONE
#define TIME_OUT_FREQ 50000000
#define TIME_OUT_HAS_IN 1
#define TIME_OUT_HAS_OUT 0
#define TIME_OUT_HAS_TRI 0
#define TIME_OUT_IRQ_TYPE NONE
#define TIME_OUT_RESET_VALUE 0

/*
 * Macros for device 'TICK_IN', class 'altera_avalon_pio'
 * The macros are prefixed with 'TICK_IN_'.
 * The prefix is the slave descriptor.
 */
#define TICK_IN_COMPONENT_TYPE altera_avalon_pio
#define TICK_IN_COMPONENT_NAME TICK_IN
#define TICK_IN_BASE 0xd0
#define TICK_IN_SPAN 16
#define TICK_IN_END 0xdf
#define TICK_IN_BIT_CLEARING_EDGE_REGISTER 0
#define TICK_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TICK_IN_CAPTURE 0
#define TICK_IN_DATA_WIDTH 1
#define TICK_IN_DO_TEST_BENCH_WIRING 0
#define TICK_IN_DRIVEN_SIM_VALUE 0
#define TICK_IN_EDGE_TYPE NONE
#define TICK_IN_FREQ 50000000
#define TICK_IN_HAS_IN 0
#define TICK_IN_HAS_OUT 1
#define TICK_IN_HAS_TRI 0
#define TICK_IN_IRQ_TYPE NONE
#define TICK_IN_RESET_VALUE 0

/*
 * Macros for device 'TIME_IN', class 'altera_avalon_pio'
 * The macros are prefixed with 'TIME_IN_'.
 * The prefix is the slave descriptor.
 */
#define TIME_IN_COMPONENT_TYPE altera_avalon_pio
#define TIME_IN_COMPONENT_NAME TIME_IN
#define TIME_IN_BASE 0xe0
#define TIME_IN_SPAN 16
#define TIME_IN_END 0xef
#define TIME_IN_BIT_CLEARING_EDGE_REGISTER 0
#define TIME_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TIME_IN_CAPTURE 0
#define TIME_IN_DATA_WIDTH 8
#define TIME_IN_DO_TEST_BENCH_WIRING 0
#define TIME_IN_DRIVEN_SIM_VALUE 0
#define TIME_IN_EDGE_TYPE NONE
#define TIME_IN_FREQ 50000000
#define TIME_IN_HAS_IN 0
#define TIME_IN_HAS_OUT 1
#define TIME_IN_HAS_TRI 0
#define TIME_IN_IRQ_TYPE NONE
#define TIME_IN_RESET_VALUE 0

/*
 * Macros for device 'TX_CLK_DIV', class 'altera_avalon_pio'
 * The macros are prefixed with 'TX_CLK_DIV_'.
 * The prefix is the slave descriptor.
 */
#define TX_CLK_DIV_COMPONENT_TYPE altera_avalon_pio
#define TX_CLK_DIV_COMPONENT_NAME TX_CLK_DIV
#define TX_CLK_DIV_BASE 0xf0
#define TX_CLK_DIV_SPAN 16
#define TX_CLK_DIV_END 0xff
#define TX_CLK_DIV_BIT_CLEARING_EDGE_REGISTER 0
#define TX_CLK_DIV_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TX_CLK_DIV_CAPTURE 0
#define TX_CLK_DIV_DATA_WIDTH 7
#define TX_CLK_DIV_DO_TEST_BENCH_WIRING 0
#define TX_CLK_DIV_DRIVEN_SIM_VALUE 0
#define TX_CLK_DIV_EDGE_TYPE NONE
#define TX_CLK_DIV_FREQ 50000000
#define TX_CLK_DIV_HAS_IN 0
#define TX_CLK_DIV_HAS_OUT 1
#define TX_CLK_DIV_HAS_TRI 0
#define TX_CLK_DIV_IRQ_TYPE NONE
#define TX_CLK_DIV_RESET_VALUE 0

/*
 * Macros for device 'SPILL_ENABLE', class 'altera_avalon_pio'
 * The macros are prefixed with 'SPILL_ENABLE_'.
 * The prefix is the slave descriptor.
 */
#define SPILL_ENABLE_COMPONENT_TYPE altera_avalon_pio
#define SPILL_ENABLE_COMPONENT_NAME SPILL_ENABLE
#define SPILL_ENABLE_BASE 0x100
#define SPILL_ENABLE_SPAN 16
#define SPILL_ENABLE_END 0x10f
#define SPILL_ENABLE_BIT_CLEARING_EDGE_REGISTER 0
#define SPILL_ENABLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SPILL_ENABLE_CAPTURE 0
#define SPILL_ENABLE_DATA_WIDTH 1
#define SPILL_ENABLE_DO_TEST_BENCH_WIRING 0
#define SPILL_ENABLE_DRIVEN_SIM_VALUE 0
#define SPILL_ENABLE_EDGE_TYPE NONE
#define SPILL_ENABLE_FREQ 50000000
#define SPILL_ENABLE_HAS_IN 0
#define SPILL_ENABLE_HAS_OUT 1
#define SPILL_ENABLE_HAS_TRI 0
#define SPILL_ENABLE_IRQ_TYPE NONE
#define SPILL_ENABLE_RESET_VALUE 0


#endif /* _ALTERA_SPW_TRC_H_ */
